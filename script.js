const colors=['RED','BLUE','GREEN','YELLOW','WHITE','BLACK'];const wireClass={RED:'wire-red',BLUE:'wire-blue',GREEN:'wire-green',YELLOW:'wire-yellow',WHITE:'wire-white',BLACK:'wire-black'};const wiresEl=document.getElementById('wires');const rulesEl=document.getElementById('rules');const timerEl=document.getElementById('timer');const statusEl=document.getElementById('status');const boom=document.getElementById('boom');const tryAgain=document.getElementById('tryAgain');const success=document.getElementById('success');const copyBtn=document.getElementById('copy');const playAgain=document.getElementById('playAgain');const resetBtn=document.getElementById('reset');let state=null;let countdown=null;function rand(n){return Math.floor(Math.random()*n)}function shuffled(arr){return arr.map(a=>[Math.random(),a]).sort((a,b)=>a[0]-b[0]).map(x=>x[1])}function sample(a){return a[rand(a.length)]}function startTimer(seconds=120){let t=seconds;const tick=()=>{const m=Math.floor(t/60).toString().padStart(2,'0');const s=(t%60).toString().padStart(2,'0');timerEl.textContent=`${m}:${s}`;if(t<=10){timerEl.style.color='red'}if(t<=0){lose('Time ran out');return}t--};tick();countdown=setInterval(tick,1000)}function stopTimer(){if(countdown){clearInterval(countdown);countdown=null}}function init(){boom.classList.add('hidden');success.classList.add('hidden');statusEl.textContent='Awaiting inputâ€¦';timerEl.style.color='#9ff3ff';const total=6;const pool=[];while(pool.length<total){pool.push(sample(colors))}const wireList=shuffled(pool).map((color,i)=>({id:i+1,color,cut:false}));const steps=buildSteps(wireList);state={wireList,steps,stepIndex:0,alive:true};renderWires();renderRules();stopTimer();startTimer(120)}function renderWires(){wiresEl.innerHTML='';state.wireList.forEach((w,i)=>{const li=document.createElement('li');li.className=wireClass[w.color];li.textContent=w.color;li.dataset.index=i;li.onclick=onCut;wiresEl.appendChild(li)})}function renderRules(){rulesEl.innerHTML='';state.steps.forEach((t,i)=>{const li=document.createElement('li');li.textContent=`Step ${i+1}: ${t.text}`;rulesEl.appendChild(li)})}function onCut(e){if(!state.alive)return;const idx=+e.currentTarget.dataset.index;if(state.wireList[idx].cut)return;const correct=state.steps[state.stepIndex].index;if(idx===correct){state.wireList[idx].cut=true;e.currentTarget.classList.add('cut');state.stepIndex++;if(state.stepIndex>=state.steps.length){win()}else{statusEl.textContent='Correct wire'}}else{lose('Wrong wire')}}function win(){stopTimer();state.alive=false;success.classList.remove('hidden');statusEl.textContent='Disarmed!'}function lose(msg){stopTimer();state.alive=false;boom.classList.remove('hidden');statusEl.textContent=msg}function buildSteps(wires){const steps=[];const available=wires.map((_,i)=>i);for(let i=0;i<3+rand(2);i++){const index=available.splice(rand(available.length),1)[0];steps.push({text:`Cut the ${wires[index].color} wire.`,index})}return steps}resetBtn.onclick=init;tryAgain.onclick=init;playAgain.onclick=init;copyBtn.onclick=()=>{navigator.clipboard.writeText('RAVENPROTOCOL');copyBtn.textContent='Copied!';setTimeout(()=>copyBtn.textContent='Copy Code',1000)};init();